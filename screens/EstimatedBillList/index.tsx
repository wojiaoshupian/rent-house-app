import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  Alert,
  RefreshControl,
  ActivityIndicator,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { billService } from '../../services/billService';
import { EstimatedBill, EstimatedBillStatus, ESTIMATED_BILL_STATUS_OPTIONS } from '../../types/bill';
import { useUser } from '../../contexts/UserContext';
import { catchError, of } from 'rxjs';

interface EstimatedBillListScreenProps {}

const EstimatedBillListScreen: React.FC<EstimatedBillListScreenProps> = () => {
  const navigation = useNavigation();
  const { user } = useUser();
  
  const [bills, setBills] = useState<EstimatedBill[]>([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [selectedStatus, setSelectedStatus] = useState<EstimatedBillStatus | 'ALL'>('ALL');
  const [currentPage, setCurrentPage] = useState(0);
  const [totalPages, setTotalPages] = useState(0);

  // Âä†ËΩΩÈ¢Ñ‰º∞Ë¥¶ÂçïÂàóË°®
  const loadEstimatedBills = async (showLoading = true, page = 0) => {
    try {
      if (showLoading) setLoading(true);

      const params: any = {
        page,
        size: 10,
      };
      if (selectedStatus !== 'ALL') params.billStatus = selectedStatus;

      const response = await billService.getEstimatedBills(params).toPromise();
      
      if (page === 0) {
        setBills(response.data);
      } else {
        setBills(prev => [...prev, ...response.data]);
      }
      
      setCurrentPage(response.pagination.page);
      setTotalPages(response.pagination.totalPages);
    } catch (error: any) {
      console.error('Âä†ËΩΩÈ¢Ñ‰º∞Ë¥¶ÂçïÂàóË°®Â§±Ë¥•:', error);
      Alert.alert('ÈîôËØØ', error.message || 'Âä†ËΩΩÈ¢Ñ‰º∞Ë¥¶ÂçïÂàóË°®Â§±Ë¥•');
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  // ‰∏ãÊãâÂà∑Êñ∞
  const onRefresh = () => {
    setRefreshing(true);
    loadEstimatedBills(false, 0);
  };

  // Âä†ËΩΩÊõ¥Â§ö
  const loadMore = () => {
    if (currentPage + 1 < totalPages) {
      loadEstimatedBills(false, currentPage + 1);
    }
  };

  // ÂàùÂßãÂä†ËΩΩ
  useEffect(() => {
    loadEstimatedBills();
  }, [selectedStatus]);

  // Ëé∑ÂèñÁä∂ÊÄÅÈ¢úËâ≤
  const getStatusColor = (status: EstimatedBillStatus) => {
    const option = ESTIMATED_BILL_STATUS_OPTIONS.find(opt => opt.value === status);
    return option?.color || '#6b7280';
  };

  // Ëé∑ÂèñÁä∂ÊÄÅÊ†áÁ≠æ
  const getStatusLabel = (status: EstimatedBillStatus) => {
    const option = ESTIMATED_BILL_STATUS_OPTIONS.find(opt => opt.value === status);
    return option?.label || status;
  };

  // Ê†ºÂºèÂåñÈáëÈ¢ù
  const formatAmount = (amount: number) => {
    return `¬•${amount.toFixed(2)}`;
  };

  // Ê†ºÂºèÂåñÊó•Êúü
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('zh-CN');
  };

  // È™åËØÅË¥πÁî®ËÆ°ÁÆóÊòØÂê¶Ê≠£Á°Æ
  const validateBillCalculation = (bill: EstimatedBill) => {
    const calculatedElectricityAmount = bill.electricityUsage * bill.electricityUnitPrice;
    const calculatedWaterAmount = bill.waterUsage * bill.waterUnitPrice;
    const calculatedHotWaterAmount = bill.hotWaterUsage * bill.hotWaterUnitPrice;

    const electricityDiff = Math.abs(calculatedElectricityAmount - bill.electricityAmount);
    const waterDiff = Math.abs(calculatedWaterAmount - bill.waterAmount);
    const hotWaterDiff = Math.abs(calculatedHotWaterAmount - bill.hotWaterAmount);

    // ÂÖÅËÆ∏Â∞èÊï∞ÁÇπÁ≤æÂ∫¶ËØØÂ∑Æ
    const tolerance = 0.01;

    return {
      electricityCorrect: electricityDiff < tolerance,
      waterCorrect: waterDiff < tolerance,
      hotWaterCorrect: hotWaterDiff < tolerance,
      calculatedElectricityAmount,
      calculatedWaterAmount,
      calculatedHotWaterAmount
    };
  };

  // Â§ÑÁêÜË¥¶ÂçïÁÇπÂáª
  const handleBillPress = (bill: EstimatedBill) => {
    navigation.navigate('EstimatedBillDetail' as never, { billId: bill.id } as never);
  };

  // Â§ÑÁêÜÂà†Èô§È¢Ñ‰º∞Ë¥¶Âçï
  const handleDeleteBill = (bill: EstimatedBill) => {
    Alert.alert(
      'Á°ÆËÆ§Âà†Èô§',
      `Á°ÆÂÆöË¶ÅÂà†Èô§ÊàøÈó¥"${bill.roomNumber}"ÁöÑ${bill.billMonth}È¢Ñ‰º∞Ë¥¶ÂçïÂêóÔºü\n\nÊÄªÈáëÈ¢ùÔºö¬•${bill.totalAmount.toFixed(2)}\n\n‚ö†Ô∏è Ê≠§Êìç‰Ωú‰∏çÂèØÊÅ¢Â§çÔºåËØ∑Ë∞®ÊÖéÊìç‰ΩúÔºÅ`,
      [
        { text: 'ÂèñÊ∂à', style: 'cancel' },
        {
          text: 'Âà†Èô§',
          style: 'destructive',
          onPress: () => {
            setLoading(true);
            billService.deleteEstimatedBill(bill.id).pipe(
              catchError((error) => {
                console.error('Âà†Èô§È¢Ñ‰º∞Ë¥¶ÂçïÂ§±Ë¥•:', error);
                Alert.alert('Âà†Èô§Â§±Ë¥•', error.message || 'Âà†Èô§È¢Ñ‰º∞Ë¥¶ÂçïÂ§±Ë¥•ÔºåËØ∑ÈáçËØï');
                return of(null);
              })
            ).subscribe({
              next: (result) => {
                if (result !== null) {
                  console.log('‚úÖ È¢Ñ‰º∞Ë¥¶ÂçïÂà†Èô§ÊàêÂäü:', bill.id);
                  Alert.alert('Âà†Èô§ÊàêÂäü', `ÊàøÈó¥"${bill.roomNumber}"ÁöÑ${bill.billMonth}È¢Ñ‰º∞Ë¥¶ÂçïÂ∑≤Âà†Èô§`);
                  // Âà∑Êñ∞Ë¥¶ÂçïÂàóË°®
                  loadEstimatedBills(false, 0);
                }
                setLoading(false);
              },
              error: (error) => {
                console.error('RxJSÈîôËØØ:', error);
                setLoading(false);
                Alert.alert('Âà†Èô§Â§±Ë¥•', 'ÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•');
              }
            });
          }
        }
      ]
    );
  };

  // Ê∏≤ÊüìÁ≠õÈÄâÂô®
  const renderFilters = () => (
    <View className="bg-white p-4 border-b border-gray-200">
      <Text className="text-sm font-medium text-gray-700 mb-2">Ë¥¶ÂçïÁä∂ÊÄÅ</Text>
      <ScrollView horizontal showsHorizontalScrollIndicator={false}>
        <TouchableOpacity
          className={`mr-2 px-3 py-1 rounded-full ${
            selectedStatus === 'ALL' ? 'bg-blue-500' : 'bg-gray-200'
          }`}
          onPress={() => setSelectedStatus('ALL')}
        >
          <Text className={`text-sm ${selectedStatus === 'ALL' ? 'text-white' : 'text-gray-700'}`}>
            ÂÖ®ÈÉ®
          </Text>
        </TouchableOpacity>
        {ESTIMATED_BILL_STATUS_OPTIONS.map((option) => (
          <TouchableOpacity
            key={option.value}
            className={`mr-2 px-3 py-1 rounded-full ${
              selectedStatus === option.value ? 'bg-blue-500' : 'bg-gray-200'
            }`}
            onPress={() => setSelectedStatus(option.value)}
          >
            <Text className={`text-sm ${selectedStatus === option.value ? 'text-white' : 'text-gray-700'}`}>
              {option.label}
            </Text>
          </TouchableOpacity>
        ))}
      </ScrollView>
    </View>
  );

  // Ê∏≤ÊüìÈ¢Ñ‰º∞Ë¥¶ÂçïÈ°π
  const renderBillItem = (bill: EstimatedBill) => (
    <TouchableOpacity
      key={bill.id}
      className="bg-white mx-4 mb-3 p-4 rounded-xl shadow-sm border border-gray-100"
      onPress={() => handleBillPress(bill)}
    >
      <View className="flex-row justify-between items-start mb-3">
        <View className="flex-1">
          <View className="flex-row items-center mb-1">
            <Text className="text-lg mr-2">üìä</Text>
            <Text className="text-lg font-semibold text-gray-800 flex-1">
              {bill.billMonth} È¢Ñ‰º∞Ë¥¶Âçï
            </Text>
          </View>
          <Text className="text-sm text-gray-600">
            ÊàøÈó¥ {bill.roomNumber} ¬∑ {bill.buildingName}
          </Text>
        </View>
        <View className="items-end">
          <Text className="text-xl font-bold text-gray-900 mb-1">
            {formatAmount(bill.totalAmount)}
          </Text>
          <View
            className="px-2 py-1 rounded-full"
            style={{ backgroundColor: getStatusColor(bill.billStatus) + '20' }}
          >
            <Text
              className="text-xs font-medium"
              style={{ color: getStatusColor(bill.billStatus) }}
            >
              {getStatusLabel(bill.billStatus)}
            </Text>
          </View>
        </View>
      </View>

      {/* Ë¥πÁî®ÊòéÁªÜ */}
      <View className="bg-gray-50 p-3 rounded-lg mb-3">
        <Text className="text-sm font-medium text-gray-700 mb-2">Ë¥πÁî®ÊòéÁªÜ</Text>
        <View className="space-y-1">
          {bill.rent > 0 && (
            <View className="flex-row justify-between">
              <Text className="text-sm text-gray-600">ÊàøÁßü</Text>
              <Text className="text-sm text-gray-800">{formatAmount(bill.rent)}</Text>
            </View>
          )}
          {bill.electricityAmount > 0 && (
            <View>
              <View className="flex-row justify-between">
                <Text className="text-sm text-gray-600">
                  ÁîµË¥π ({bill.electricityUsage}Â∫¶ √ó ¬•{bill.electricityUnitPrice.toFixed(2)})
                </Text>
                <Text className="text-sm text-gray-800">{formatAmount(bill.electricityAmount)}</Text>
              </View>
              {/* ÂºÄÂèëÊ®°Âºè‰∏ãÊòæÁ§∫ËÆ°ÁÆóÈ™åËØÅ */}
              {__DEV__ && (() => {
                const validation = validateBillCalculation(bill);
                if (!validation.electricityCorrect) {
                  return (
                    <Text className="text-xs text-red-500 mt-1">
                      ‚ö†Ô∏è ËÆ°ÁÆóÂºÇÂ∏∏: Â∫î‰∏∫¬•{validation.calculatedElectricityAmount.toFixed(2)}
                    </Text>
                  );
                }
                return null;
              })()}
            </View>
          )}
          {bill.waterAmount > 0 && (
            <View>
              <View className="flex-row justify-between">
                <Text className="text-sm text-gray-600">
                  Ê∞¥Ë¥π ({bill.waterUsage}Âê® √ó ¬•{bill.waterUnitPrice.toFixed(2)})
                </Text>
                <Text className="text-sm text-gray-800">{formatAmount(bill.waterAmount)}</Text>
              </View>
              {/* ÂºÄÂèëÊ®°Âºè‰∏ãÊòæÁ§∫ËÆ°ÁÆóÈ™åËØÅ */}
              {__DEV__ && (() => {
                const validation = validateBillCalculation(bill);
                if (!validation.waterCorrect) {
                  return (
                    <Text className="text-xs text-red-500 mt-1">
                      ‚ö†Ô∏è ËÆ°ÁÆóÂºÇÂ∏∏: Â∫î‰∏∫¬•{validation.calculatedWaterAmount.toFixed(2)}
                    </Text>
                  );
                }
                return null;
              })()}
            </View>
          )}
          {bill.hotWaterAmount > 0 && (
            <View>
              <View className="flex-row justify-between">
                <Text className="text-sm text-gray-600">
                  ÁÉ≠Ê∞¥Ë¥π ({bill.hotWaterUsage}Âê® √ó ¬•{bill.hotWaterUnitPrice.toFixed(2)})
                </Text>
                <Text className="text-sm text-gray-800">{formatAmount(bill.hotWaterAmount)}</Text>
              </View>
              {/* ÂºÄÂèëÊ®°Âºè‰∏ãÊòæÁ§∫ËÆ°ÁÆóÈ™åËØÅ */}
              {__DEV__ && (() => {
                const validation = validateBillCalculation(bill);
                if (!validation.hotWaterCorrect) {
                  return (
                    <Text className="text-xs text-red-500 mt-1">
                      ‚ö†Ô∏è ËÆ°ÁÆóÂºÇÂ∏∏: Â∫î‰∏∫¬•{validation.calculatedHotWaterAmount.toFixed(2)}
                    </Text>
                  );
                }
                return null;
              })()}
            </View>
          )}
          {bill.otherFees > 0 && (
            <View className="flex-row justify-between">
              <Text className="text-sm text-gray-600">ÂÖ∂‰ªñË¥πÁî®</Text>
              <Text className="text-sm text-gray-800">{formatAmount(bill.otherFees)}</Text>
            </View>
          )}
        </View>
      </View>

      <View className="flex-row justify-between items-center">
        <Text className="text-sm text-gray-500">
          Ë¥¶ÂçïÊó•ÊúüÔºö{formatDate(bill.billDate)}
        </Text>

        <View className="flex-row space-x-2">
          {/* Âà†Èô§ÊåâÈíÆ - ÊâÄÊúâÁä∂ÊÄÅÈÉΩÂèØ‰ª•Âà†Èô§ */}
          <TouchableOpacity
            className="bg-red-500 px-3 py-2 rounded-lg"
            onPress={(e) => {
              e.stopPropagation(); // ÈòªÊ≠¢‰∫ã‰ª∂ÂÜíÊ≥°ÔºåÈÅøÂÖçËß¶ÂèëÂç°ÁâáÁÇπÂáª
              handleDeleteBill(bill);
            }}
          >
            <Text className="text-white text-xs font-medium">üóëÔ∏è Âà†Èô§</Text>
          </TouchableOpacity>

          {/* Á°ÆËÆ§ÊåâÈíÆ - Âè™ÊúâÂ∑≤ÁîüÊàêÁä∂ÊÄÅÊâçÊòæÁ§∫ */}
          {bill.billStatus === EstimatedBillStatus.GENERATED && (
            <TouchableOpacity
              className="bg-green-500 px-3 py-2 rounded-lg"
              onPress={(e) => {
                e.stopPropagation(); // ÈòªÊ≠¢‰∫ã‰ª∂ÂÜíÊ≥°ÔºåÈÅøÂÖçËß¶ÂèëÂç°ÁâáÁÇπÂáª
                Alert.alert('Á°ÆËÆ§Ë¥¶Âçï', 'Á°ÆÂÆöË¶ÅÁ°ÆËÆ§Ëøô‰∏™È¢Ñ‰º∞Ë¥¶ÂçïÂêóÔºü', [
                  { text: 'ÂèñÊ∂à', style: 'cancel' },
                  { text: 'Á°ÆËÆ§', onPress: () => {
                    // TODO: ÂÆûÁé∞Á°ÆËÆ§Ë¥¶ÂçïÂäüËÉΩ
                    Alert.alert('ÊèêÁ§∫', 'Á°ÆËÆ§Ë¥¶ÂçïÂäüËÉΩÂºÄÂèë‰∏≠...');
                  }}
                ]);
              }}
            >
              <Text className="text-white text-xs font-medium">‚úÖ Á°ÆËÆ§</Text>
            </TouchableOpacity>
          )}
        </View>
      </View>
    </TouchableOpacity>
  );

  if (loading && bills.length === 0) {
    return (
      <View className="flex-1 justify-center items-center bg-gray-50">
        <ActivityIndicator size="large" color="#3b82f6" />
        <Text className="mt-2 text-gray-600">Âä†ËΩΩÈ¢Ñ‰º∞Ë¥¶Âçï‰∏≠...</Text>
      </View>
    );
  }

  return (
    <View className="flex-1 bg-gray-50">
      {renderFilters()}
      
      <ScrollView
        className="flex-1"
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
        onScroll={({ nativeEvent }) => {
          const { layoutMeasurement, contentOffset, contentSize } = nativeEvent;
          const isCloseToBottom = layoutMeasurement.height + contentOffset.y >= contentSize.height - 20;
          if (isCloseToBottom && !loading && currentPage + 1 < totalPages) {
            loadMore();
          }
        }}
        scrollEventThrottle={400}
      >
        <View className="py-4">
          {bills.length === 0 ? (
            <View className="flex-1 justify-center items-center py-20">
              <Text className="text-6xl mb-4">üìä</Text>
              <Text className="text-lg font-medium text-gray-800 mb-2">ÊöÇÊó†È¢Ñ‰º∞Ë¥¶Âçï</Text>
              <Text className="text-gray-600 text-center px-8">
                ÂΩìÂâçÁ≠õÈÄâÊù°‰ª∂‰∏ãÊ≤°ÊúâÊâæÂà∞È¢Ñ‰º∞Ë¥¶ÂçïËÆ∞ÂΩï
              </Text>
            </View>
          ) : (
            <>
              {bills.map(renderBillItem)}
              
              {/* Âä†ËΩΩÊõ¥Â§öÊåáÁ§∫Âô® */}
              {loading && bills.length > 0 && (
                <View className="py-4 items-center">
                  <ActivityIndicator size="small" color="#3b82f6" />
                  <Text className="mt-2 text-gray-600">Âä†ËΩΩÊõ¥Â§ö...</Text>
                </View>
              )}
              
              {/* Ê≤°ÊúâÊõ¥Â§öÊï∞ÊçÆÊèêÁ§∫ */}
              {currentPage + 1 >= totalPages && bills.length > 0 && (
                <View className="py-4 items-center">
                  <Text className="text-gray-500">Ê≤°ÊúâÊõ¥Â§öÊï∞ÊçÆ‰∫Ü</Text>
                </View>
              )}
            </>
          )}
        </View>
      </ScrollView>
    </View>
  );
};

export default EstimatedBillListScreen;
